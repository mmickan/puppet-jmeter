#!/bin/sh
### BEGIN INIT INFO
# chkconfig:         2345 85 15
# Provides:          jmeter-server
# Required-Start:    $syslog $local_fs
# Required-Stop:     $syslog $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Apache JMeter Remote Server
# Description:       Apache JMeter Remote Server runs JMeter tests issued from a remote server.
### END INIT INFO

# Author: Brian Flad <bflad417 at gmail dot com>
# Modified: Scott Doane <sdoane@austin.utexas.edu>
#
# PATH should only include /usr/* if it runs after the mountnfs.sh script
#Location of JAVA_HOME (bin files)
export JAVA_HOME=/etc/alternatives/jre
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Apache JMeter Remote Server"
NAME=jmeter
JMETER_PATH=<%= @installer_path -%>/jmeter
# Change this to your IP
RMI_HOST_DEF="-Djava.rmi.server.hostname=<%= @server_ip %>"
SERVER_PORT=<%= @server_port %>
SERVER_CMD="$JMETER_PATH/bin/$NAME-server"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
JMETER_PID=`ps ax --width=1000 | grep "[A]pacheJMeter.jar -Dserver_port=1099 -s"|awk '{printf $1 ""}'`

#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop
SHUTDOWN_WAIT=20

jmeter_pid() {
        echo `ps ax --width=1000 | grep "[A]pacheJMeter.jar -Dserver_port=1099 -s"|awk '{printf $1 ""}'`
}

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0

[ -f $JMETER_PATH/bin/$NAME-server ] || exit 0
[ -f $JMETER_PATH/bin/$NAME ] || exit 0

#
# Function that starts the daemon/service
#
start() {
  pid=$(jmeter_pid)
  if [ -n "$pid" ]
  then
    echo -e "\e[00;31mJmeter is already running (pid: $pid)\e[00m"
  else
    # Start jmeter
    echo -e "\e[00;32mStarting jmeter\e[00m"
    $JMETER_PATH/bin/$NAME-server $RMI_HOST_DEF 2>&1 &
    sleep 3
    status
  fi
  return 0
}

#
# Function that stops the daemon/service
#
stop() {
  pid=$(jmeter_pid)
  if [ -n "$pid" ]
  then
    echo -e "\e[00;31mStoping Jmeter\e[00m"
    kill $pid

    let kwait=$SHUTDOWN_WAIT
    count=0;
    until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
    do
      echo -n -e "\n\e[00;31mwaiting for processes to exit\e[00m" && echo;
      sleep 1
      let count=$count+1;
    done

    if [ $count -gt $kwait ]; then
      echo -n -e "\n\e[00;31mkilling processes that didn't stop after $SHUTDOWN_WAIT seconds\e[00m"
      terminate
    fi

  else
    echo -e "\e[00;31mJmeter is not running\e[00m"
  fi
  return 0
}

#
# Function that gives status of daemon/server
#
status() {
  pid=$(jmeter_pid)
  if [ -n "$pid" ]
    then echo -e "\e[00;32mJmeter is running with pid: $pid\e[00m"
  else
    echo -e "\e[00;31mJmeter is not running\e[00m"
    return 3
  fi
}

terminate() {
	echo -e "\e[00;31mTerminating Jmeter\e[00m"
	kill -9 $(jmeter_pid)
}


case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        ;;
  restart|force-reload)
        stop
        start
        ;;
  kill)
		    terminate
	      ;;
  condrestart)
        [ -e /var/lock/subsys/$NAME ] && restart
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|kill}" >&2
        exit 3
        ;;
esac

exit $RETVAL
